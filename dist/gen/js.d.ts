import { ArrayNode, ASTNode, ASTVisitor, AwaitExpressionNode, BinaryOpNode, BlockNode, BooleanNode, Builtin, CallExpressionNode, ExpressionStatementNode, FieldNode, FunctionDecNode, IdentifierNode, IfElseNode, LambdaNode, MemberExpressionNode, NumberNode, ObjectNode, ParameterNode, ParametersListNode, PropertyNode, ReturnNode, SourceElementsNode, StringNode, StructDefNode, StructNode, VariableListNode, VariableNode } from "../types";
import { Extension } from "../plugin/plugin";
export declare class JS implements ASTVisitor {
    builtin: Record<string, Builtin>;
    private codeBuffer;
    private plugins;
    private indentLevel;
    constructor(builtin: Record<string, Builtin>);
    write(code: string): void;
    plugin(p: Extension<any>): this;
    before_accept(node: ASTNode, args?: Record<string, any>): void;
    visit(node?: ASTNode, args?: Record<string, any>): void;
    after_accept(node: ASTNode, args?: Record<string, any>): void;
    create_args(args: any[]): ASTNode[];
    init(ast: SourceElementsNode, opts: any): void;
    run(ast: ASTNode, opts: Record<string, any>): this;
    code(): string;
    private indent;
    private increaseIndent;
    private decreaseIndent;
    visitSourceElements(node: SourceElementsNode, args?: Record<string, any>): void;
    visitExpressionStatement(node: ExpressionStatementNode, args?: Record<string, any>): void;
    visitFunctionDec(node: FunctionDecNode, args?: Record<string, any>): void;
    visitLambda(node: LambdaNode, args?: Record<string, any>): void;
    visitParametersList(node: ParametersListNode, args?: Record<string, any>): void;
    visitParameter(node: ParameterNode, args?: Record<string, any>): void;
    visitBlock(node: BlockNode, args?: Record<string, any>): void;
    visitReturn(node: ReturnNode, args?: Record<string, any>): void;
    visitCallExpression(node: CallExpressionNode, args?: Record<string, any>): void;
    visitMemberExpression(node: MemberExpressionNode, args?: Record<string, any>): void;
    visitVariableList(node: VariableListNode, args?: Record<string, any>): void;
    visitVariable(node: VariableNode, args?: Record<string, any>): void;
    visitBinaryOp(node: BinaryOpNode, args?: Record<string, any>): void;
    visitIfElse(node: IfElseNode, args?: Record<string, any>): void;
    visitAwaitExpression(node: AwaitExpressionNode, args?: Record<string, any>): void;
    visitIdentifier(node: IdentifierNode, args?: Record<string, any>): void;
    visitStructDef(node: StructDefNode, args?: Record<string, any>): void;
    visitStruct(node: StructNode, args?: Record<string, any>): void;
    visitField(node: FieldNode, args?: Record<string, any>): void;
    visitObject(node: ObjectNode, args?: Record<string, any>): void;
    visitProperty(node: PropertyNode, args?: Record<string, any>): void;
    visitArray(node: ArrayNode, args?: Record<string, any>): void;
    visitBoolean(node: BooleanNode, args?: Record<string, any>): void;
    visitNumber(node: NumberNode, args?: Record<string, any>): void;
    visitString(node: StringNode, args?: Record<string, any>): void;
}
//# sourceMappingURL=js.d.ts.map