import { ASTNode } from "./ast";
import { Token } from "../lexer/lexer";
export declare class Parser {
    private tokens;
    private current;
    constructor(tokens: Token[]);
    private peek;
    private previous;
    private is_at_end;
    private advance;
    private check;
    private match;
    private error;
    parse(): ASTNode;
    private source_elements;
    private source_element;
    private function_dec;
    private async_function_dec;
    private lambda_function;
    private parameters_list;
    private parameter;
    private statement;
    private block;
    private return_statement;
    private break_statement;
    private continue_statement;
    private variable_statement;
    private variable;
    private while_statement;
    private for_statement;
    private if_statement;
    private expression_statement;
    private expression;
    private assignment_expression;
    private is_assignment_operator;
    private is_valid_assignment_target;
    private conditional_expression;
    private logical_or_expression;
    private logical_and_expression;
    private bitwise_or_expression;
    private bitwise_xor_expression;
    private bitwise_and_expression;
    private equality_expression;
    private is_equality_operator;
    private relational_expression;
    private is_relational_operator;
    private shift_expression;
    private is_shift_operator;
    private additive_expression;
    private is_additive_operator;
    private multiplicative_expression;
    private is_multiplicative_operator;
    private unary_expression;
    private postfix_expression;
    private primary_expression;
    private constants;
    private number;
    private boolean;
    private string;
    private array;
    private object;
    private property_definition;
    private identifier;
    type(): ASTNode;
    private generic_type;
    private type_parameters;
    private primitive;
    private array_type;
    private promise_type;
    private map_type;
    private function_type;
    private struct_type;
    private enum_type;
    private struct_statement;
    private field_list;
    private enum_statement;
    private enum_body;
    private tuple_payload;
}
//# sourceMappingURL=parser.d.ts.map